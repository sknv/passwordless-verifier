// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package openapi

import (
	"context"
	"sync"

	"github.com/sknv/passwordless-verifier/internal/model"
	"github.com/sknv/passwordless-verifier/internal/usecase"
)

// Ensure, that UsecaseMock does implement Usecase.
// If this is not the case, regenerate this file with moq.
var _ Usecase = &UsecaseMock{}

// UsecaseMock is a mock implementation of Usecase.
//
// 	func TestSomethingThatUsesUsecase(t *testing.T) {
//
// 		// make and configure a mocked Usecase
// 		mockedUsecase := &UsecaseMock{
// 			CreateVerificationFunc: func(ctx context.Context, newVerification *usecase.NewVerification) (*model.Verification, error) {
// 				panic("mock out the CreateVerification method")
// 			},
// 			GetVerificationFunc: func(ctx context.Context, params *usecase.GetVerificationParams) (*model.Verification, error) {
// 				panic("mock out the GetVerification method")
// 			},
// 		}
//
// 		// use mockedUsecase in code that requires Usecase
// 		// and then make assertions.
//
// 	}
type UsecaseMock struct {
	// CreateVerificationFunc mocks the CreateVerification method.
	CreateVerificationFunc func(ctx context.Context, newVerification *usecase.NewVerification) (*model.Verification, error)

	// GetVerificationFunc mocks the GetVerification method.
	GetVerificationFunc func(ctx context.Context, params *usecase.GetVerificationParams) (*model.Verification, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateVerification holds details about calls to the CreateVerification method.
		CreateVerification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NewVerification is the newVerification argument value.
			NewVerification *usecase.NewVerification
		}
		// GetVerification holds details about calls to the GetVerification method.
		GetVerification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *usecase.GetVerificationParams
		}
	}
	lockCreateVerification sync.RWMutex
	lockGetVerification    sync.RWMutex
}

// CreateVerification calls CreateVerificationFunc.
func (mock *UsecaseMock) CreateVerification(ctx context.Context, newVerification *usecase.NewVerification) (*model.Verification, error) {
	if mock.CreateVerificationFunc == nil {
		panic("UsecaseMock.CreateVerificationFunc: method is nil but Usecase.CreateVerification was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		NewVerification *usecase.NewVerification
	}{
		Ctx:             ctx,
		NewVerification: newVerification,
	}
	mock.lockCreateVerification.Lock()
	mock.calls.CreateVerification = append(mock.calls.CreateVerification, callInfo)
	mock.lockCreateVerification.Unlock()
	return mock.CreateVerificationFunc(ctx, newVerification)
}

// CreateVerificationCalls gets all the calls that were made to CreateVerification.
// Check the length with:
//     len(mockedUsecase.CreateVerificationCalls())
func (mock *UsecaseMock) CreateVerificationCalls() []struct {
	Ctx             context.Context
	NewVerification *usecase.NewVerification
} {
	var calls []struct {
		Ctx             context.Context
		NewVerification *usecase.NewVerification
	}
	mock.lockCreateVerification.RLock()
	calls = mock.calls.CreateVerification
	mock.lockCreateVerification.RUnlock()
	return calls
}

// GetVerification calls GetVerificationFunc.
func (mock *UsecaseMock) GetVerification(ctx context.Context, params *usecase.GetVerificationParams) (*model.Verification, error) {
	if mock.GetVerificationFunc == nil {
		panic("UsecaseMock.GetVerificationFunc: method is nil but Usecase.GetVerification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *usecase.GetVerificationParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockGetVerification.Lock()
	mock.calls.GetVerification = append(mock.calls.GetVerification, callInfo)
	mock.lockGetVerification.Unlock()
	return mock.GetVerificationFunc(ctx, params)
}

// GetVerificationCalls gets all the calls that were made to GetVerification.
// Check the length with:
//     len(mockedUsecase.GetVerificationCalls())
func (mock *UsecaseMock) GetVerificationCalls() []struct {
	Ctx    context.Context
	Params *usecase.GetVerificationParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *usecase.GetVerificationParams
	}
	mock.lockGetVerification.RLock()
	calls = mock.calls.GetVerification
	mock.lockGetVerification.RUnlock()
	return calls
}
